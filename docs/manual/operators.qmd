# Operators

The following operators\index{operators} are supported within math expressions:

::: {.minipage data-latex="{\textwidth}"}
| Operator | Description |
| :-- | :-- |
| \* | Multiplication. |
| / | Division. |
| % | Modulus: Divides two values and returns the remainder. |
| + | Addition. |
| \- | Subtraction. |
| ^ | Either exponentiation or bitwise XOR. Exponentiation is the default; define `TE_BITWISE_OPERATIONS` to enable bitwise behavior. For exponentiation, the number in front of ^ is the base, the number after it is the power to raise it to. |
| ** | Exponentiation. (This is an alias for ^) |
| < | Less than. |
| \> | Greater than. |
| \>= | Greater than or equal to. |
| <= | Less than or equal to. |
| \= | Equals. |
| \=\= | Equals. (This is an alias for \=) |
| <> | Not equal to. |
| \!\= | Not equal to. (This is an alias for <>) |
| & | Either logical or bitwise conjunction (AND). Logical is the default, define `TE_BITWISE_OPERATIONS` to enable bitwise behavior. |
| && | Either logical conjunction (AND). |
| \| | Logical  or bitwise alternative (OR). Logical is the default, define `TE_BITWISE_OPERATIONS` to enable bitwise behavior. |
| \|\| | Logical alternative (OR). |
| ( ) | Groups sub-expressions, overriding the order of operations. |
| << | Bitwise left shift. |
| >> | Bitwise right shift. |
| <<< | Bitwise left rotate. (Only available if compiled as C++20.) |
| >>> | Bitwise right rotate. (Only available if compiled as C++20.) |

Table: Operators
:::

::: {.minipage data-latex="{\textwidth}"}
For operators, the order of precedence is:

| Operator | Description |
| :-- | :-- |
| ( ) | Instructions in parentheses are executed first. |
| \+ and - | Positive or negative sign for a value. |
| ^   | Exponentiation. |
| \*, /, and % | Multiplication, division, and modulus. |
| \+ and - | Addition and subtraction. |
| <<, >>, <<<, >>> | Bitwise left and right shift and rotation. |
| <, \>, \>=, <= | Relational comparisons. |
| \= and \!\= | Equality comparisons. |
| && | Logical conjunction (AND). |
| \|\| | Logical alternative (OR). |
| & | Bitwise AND (if `TE_BITWISE_OPERATIONS` is defined). |
| ^ | Bitwise XOR (if `TE_BITWISE_OPERATIONS` is defined). |
| \| | Bitwise OR (if `TE_BITWISE_OPERATIONS` is defined). |
:::

For example, the following:

$$
5+5+5/2
$$

Will yield `12.5`. `5/2` is executed first, then added to the other fives. However, by using parentheses:

$$
(5+5+5)/2
$$

You can override it so that the additions happen first (resulting in `15`), followed by the division (finally yielding `7.5`).
Likewise, `(2+5)^2` will yield `49` (`7` squared), while `2+5^2` will yield `27` (`5` squared, plus `2`).

## Compatibility Note {-}

The `%` character acts as a modulus operator in *TinyExpr++*, which is different from most
spreadsheet programs. In programs such as *LibreOffice Calc* and *Excel*, `%` is used
to convert a number to a percentage. For example, `=20%` would yield `0.20` in *Excel*.
In *TinyExpr++*, however, `20%` will result in a syntax error as
it is expecting a binary (modulus) operation.
